{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","tracker/tests/app.lint-test.js","tracker/tests/helpers/destroy-app.js","tracker/tests/helpers/module-for-acceptance.js","tracker/tests/helpers/resolver.js","tracker/tests/helpers/start-app.js","tracker/tests/helpers/x-select.js","tracker/tests/integration/components/flash-alert-test.js","tracker/tests/integration/components/listing-item-test.js","tracker/tests/integration/helpers/moment-from-test.js","tracker/tests/test-helper.js","tracker/tests/tests.lint-test.js","tracker/tests/unit/adapters/application-test.js","tracker/tests/unit/controllers/application-test.js","tracker/tests/unit/controllers/sighting/edit-test.js","tracker/tests/unit/controllers/sightings/new-test.js","tracker/tests/unit/models/cryptid-test.js","tracker/tests/unit/models/sighting-test.js","tracker/tests/unit/models/witness-test.js","tracker/tests/unit/routes/application-test.js","tracker/tests/unit/routes/cryptid-test.js","tracker/tests/unit/routes/cryptids-test.js","tracker/tests/unit/routes/index-test.js","tracker/tests/unit/routes/sighting-test.js","tracker/tests/unit/routes/sighting/edit-test.js","tracker/tests/unit/routes/sighting/index-test.js","tracker/tests/unit/routes/sightings-test.js","tracker/tests/unit/routes/sightings/index-test.js","tracker/tests/unit/routes/sightings/new-test.js","tracker/tests/unit/routes/witness-test.js","tracker/tests/unit/routes/witnesses-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('tracker/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/flash-alert.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/flash-alert.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/listing-item.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/listing-item.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/sighting/edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/sighting/edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/moment-from.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/moment-from.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/cryptid.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/cryptid.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/sighting.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/sighting.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/witness.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/witness.js should pass ESLint\\n\\n8:13 - \\'Ember\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/cryptid.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/cryptid.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/cryptids.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/cryptids.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/sighting.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/sighting.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/sighting/edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/sighting/edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/sighting/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/sighting/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/sightings.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/sightings.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/sightings/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/sightings/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/sightings/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/sightings/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/witness.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/witness.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/witnesses.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/witnesses.js should pass ESLint\\n\\n');\n  });\n});","define('tracker/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('tracker/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'tracker/tests/helpers/start-app', 'tracker/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var resolve = Ember.RSVP.resolve;\n});","define('tracker/tests/helpers/resolver', ['exports', 'tracker/resolver', 'tracker/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('tracker/tests/helpers/start-app', ['exports', 'tracker/app', 'tracker/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('tracker/tests/helpers/x-select', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.select = select;\n  var jQuery = Ember.$;\n\n\n  /**\n   * Picks an option from the select and sets it to be `selected` in the DOM.\n   *\n   * @method select\n   * @param {string|<jQuery>} selector - selector for the select to pick from.\n   * @param {string} texts - text of the option you are picking\n   */\n  function select(selector) {\n    for (var _len = arguments.length, texts = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      texts[_key - 1] = arguments[_key];\n    }\n\n    var $select = selector instanceof jQuery ? selector : Ember.$(selector);\n    var $options = $select.find('option');\n\n    if (!$options.length) {\n      throw 'No options found in ' + selector;\n    }\n\n    $options.each(function () {\n      var _this = this;\n\n      var $option = Ember.$(this);\n\n      Ember.run(function () {\n        _this.selected = texts.some(function (text) {\n          // uppercase both texts so the helper isn't case sensastive.\n          var optionText = $option.text().trim().toUpperCase();\n\n          return optionText === text.toUpperCase();\n        });\n\n        if (_this.selected) {\n          $option.prop('selected', true).trigger('change');\n        }\n      });\n    });\n  }\n});","define('tracker/tests/integration/components/flash-alert-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('flash-alert', 'Integration | Component | flash alert', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"8y5qGQko\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"flash-alert\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"mUV4lJst\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"flash-alert\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('tracker/tests/integration/components/listing-item-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('listing-item', 'Integration | Component | listing item', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"QjCxfLks\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"listing-item\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"xCgrRWcK\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"listing-item\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('tracker/tests/integration/helpers/moment-from-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('moment-from', 'helper:moment-from', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"8QybL971\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"moment-from\\\"],[[28,[\\\"inputValue\\\"]]],null],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('tracker/tests/test-helper', ['tracker/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('tracker/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/flash-alert-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flash-alert-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/listing-item-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/listing-item-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/moment-from-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/moment-from-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/sighting/edit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/sighting/edit-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/sightings/new-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/sightings/new-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/cryptid-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/cryptid-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/sighting-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/sighting-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/witness-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/witness-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/cryptid-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/cryptid-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/cryptids-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/cryptids-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/sighting-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/sighting-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/sighting/edit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/sighting/edit-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/sighting/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/sighting/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/sightings-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/sightings-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/sightings/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/sightings/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/sightings/new-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/sightings/new-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/witness-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/witness-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/witnesses-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/witnesses-test.js should pass ESLint\\n\\n');\n  });\n});","define('tracker/tests/unit/adapters/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('tracker/tests/unit/controllers/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:application', 'Unit | Controller | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('tracker/tests/unit/controllers/sighting/edit-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:sighting/edit', 'Unit | Controller | sighting/edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('tracker/tests/unit/controllers/sightings/new-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:sightings/new', 'Unit | Controller | sightings/new', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('tracker/tests/unit/models/cryptid-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('cryptid', 'Unit | Model | cryptid', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('tracker/tests/unit/models/sighting-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('sighting', 'Unit | Model | sighting', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('tracker/tests/unit/models/witness-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('witness', 'Unit | Model | witness', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('tracker/tests/unit/routes/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('tracker/tests/unit/routes/cryptid-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:cryptid', 'Unit | Route | cryptid', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('tracker/tests/unit/routes/cryptids-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:cryptids', 'Unit | Route | cryptids', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('tracker/tests/unit/routes/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('tracker/tests/unit/routes/sighting-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:sighting', 'Unit | Route | sighting', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('tracker/tests/unit/routes/sighting/edit-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:sighting/edit', 'Unit | Route | sighting/edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('tracker/tests/unit/routes/sighting/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:sighting/index', 'Unit | Route | sighting/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('tracker/tests/unit/routes/sightings-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:sightings', 'Unit | Route | sightings', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('tracker/tests/unit/routes/sightings/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:sightings/index', 'Unit | Route | sightings/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('tracker/tests/unit/routes/sightings/new-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:sightings/new', 'Unit | Route | sightings/new', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('tracker/tests/unit/routes/witness-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:witness', 'Unit | Route | witness', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('tracker/tests/unit/routes/witnesses-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:witnesses', 'Unit | Route | witnesses', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","require('tracker/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClfile":"tests.js"}